//////////////////// Test OUTLINERS ////////////////////////////////
package testIO;
import java.util.ArrayList;
import java.util.List;
import static org.junit.Assert.*;

import org.junit.Test;

public class test_IO {

	@Test
	public void test() {
		
		Statistics st =new Statistics();
		double[]test1=new double[8];
		test1[0]=1.0;
		test1[1]=2.0;
		test1[2]=10.0;
		test1[3]=2.4;
		test1[4]=1.7;
		test1[5]=23.99;
		test1[6]=-5.0;
		test1[7]=-500.0;
		double av1=0;
		for(int i=0;i<test1.length;i++) av1+=test1[i];
		av1=av1/test1.length;
		double deviation1=0;
		System.out.println("Average input 1: "+av1);
		for(int i=0;i<test1.length;i++)
			deviation1 += Math.pow(test1[i]-av1, 2);
		deviation1 = deviation1/(test1.length-1);
		deviation1 = Math.sqrt(deviation1);
		double upper1 = av1+2*deviation1;
		double bottom1 = av1-2*deviation1;
		System.out.println("upper input 1 : "+upper1);
		System.out.println("bottom input 1 : "+bottom1);
		
		double[]result1=new double[8];
		result1=Statistics.outliners(test1);
		double[]pr=new double[8];
		pr[0]=1.0;
		pr[1]=2.0;
		pr[2]=10.0;
		pr[3]=2.4;
		pr[4]=1.7;
		pr[5]=23.99;
		pr[6]=-5.0;
		pr[7]=-415.60994551079665;
		
		//System.out.println("Test array result1 and pr, if false result1==pr");
	     boolean czy=false;
	   for(int i=0;i<result1.length;i++)
	   {
		   if(result1[i]!=pr[i]) czy=true;   
	   }
	   System.out.println("Reult test 1, if false its ok : "+czy);
		
		
		/// TEST 2
		
		
		System.out.println("/////////TEST 2/////////");
		
		double[]test2=new double[7];
		test2[0]=1.99;
		test2[1]=5.21;
		test2[2]=10.5;
		test2[3]=600.0;
		test2[4]=-400.0;
		test2[5]=0.99;
		test2[6]=-5.23;
		double av2=0;
		for(int i=0;i<test2.length;i++) av2+=test2[i];
		av2=av2/test2.length;
		double deviation2=0;
		System.out.println();
		System.out.println("Average input 2: "+av2);
		for(int i=0;i<test2.length;i++)
			deviation2 += Math.pow(test2[i]-av2, 2);
		deviation2 = deviation2/(test2.length-1);
		deviation2 = Math.sqrt(deviation2);
		double upper2 = av2+2*deviation2;
		double bottom2 = av2-2*deviation2;
		System.out.println("upper input 2 : "+upper2);
		System.out.println("bottom input 2 : "+bottom2);
		
		double[] result2 = new double[7];
		result2=Statistics.outliners(test2);
		
		double[]pr2=new double[7];
		pr2[0]=1.99;
		pr2[1]=5.21;
		pr2[2]=10.5;
		pr2[3]=600.0;
		pr2[4]=-400.0;
		pr2[5]=0.99;
		pr2[6]=-5.23;
		boolean czy2=false;
		for(int i=0;i<result2.length;i++)
		{
			if(result2[i]!=pr2[i]) czy2=true;
		}
        		System.out.println("Reult test 2, if false its ok : "+czy2);	
}
	
	



/////////////////////   TEST NORMALIZATION ////////////
package statictics;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;

/**
 *
 * @author Magdalena Wojciechowska
 */
public class NormalizationTest {
    
    public NormalizationTest() {
    }
    
    @BeforeClass
    public static void setUpClass() {
    }
    
    @AfterClass
    public static void tearDownClass() {
    }
    
    @Before
    public void setUp() {
    }
    
    @After
    public void tearDown() {
    }

    /**
     * Test of normalization method, of class Statistics.
     */
    @Test
    public void testNormalization() {
         System.out.println("Test metody 'normalization'");
        //przykladowy zestaw danych dla metody 'outliners'
        double [] tab=new double[6];
		tab[0]=2.0;
		tab[1]=3.5;
		tab[2]=-100;
		tab[3]=35.5;
		tab[4]=25.3;
		tab[5]=32.90;
        
        System.out.println("Sprawdzamy prawidlowosc pobranych danych (zwracanych przez metoda 'outliners').");
     
        double [] dane =Statistics.outliners(tab);
        boolean czy_zgodne=true;
      
        if(dane==null) czy_zgodne = false;
            
            if(!czy_zgodne)
            {          
                 System.out.println("Nieprawidlowy pobor danych");
            }
            else System.out.println("Dane zostaly prawidlowo pobrane!");
      System.out.println("Sprawdzamy normalizacje danych.");
      /*Transformacja ta jest przeprowadzana wedlug wzoru:
        a(i)'=(a(i)-a(i)max)/(a(i)max-a(i)min)
 	a(i)max jest maksymalna wartosc wystepujaca w zbiorze dla i-tej wartosci
        a(i))min jest minimalna wartoscia
      */
        double [] oczekiwana= Statistics.outliners(tab);
        double max = oczekiwana[0];                        
        double min = oczekiwana[0];                       
        for (int i = 1; i < oczekiwana.length; i++) {
            if (oczekiwana[i]>max) max = oczekiwana[i];   
            if (oczekiwana[i]<min) min = oczekiwana[i];     
        }
       
        for(int i=0;i<oczekiwana.length;i++)                  
            oczekiwana[i] = (oczekiwana[i]-min)/(max-min)*2-1;
                
        //Tablica 'oczekiwana' zawiera prawidlowo znormalizowane elementy,porownujemy je z elementami zwroconymi przez metode 'normalization'
        double [] uzyskana= Statistics.normalization(dane);
        int i=0;
        while(i < oczekiwana.length && czy_zgodne == true)
        {
            
            if(oczekiwana[i] != uzyskana[i] || uzyskana[i]<-1 || uzyskana[i]>1) czy_zgodne = false;       
            if(!czy_zgodne)
            {
                System.out.println("Blad w tescie normalizacji!");      
                
            }
            
	    i++;
           
        }//end while
         if(czy_zgodne) System.out.println("Test zako≈Ñczony  powodzeniem.");   
        
        assertEquals(czy_zgodne, true);
    }    
}
