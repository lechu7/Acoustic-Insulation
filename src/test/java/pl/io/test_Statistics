//////////////////// Test OUTLINERS ////////////////////////////////
package testIO;
import java.util.ArrayList;
import java.util.List;
import static org.junit.Assert.*;

import org.junit.Test;

public class test_IO {

	@Test
	public void test() {
		Statistics test = new Statistics();
		List<Double> test1 = new ArrayList();
		test1.add(1.0);
		test1.add(2.0);
		test1.add(10.0);
		test1.add(2.4);
		test1.add(1.7);
		test1.add(23.99);
		test1.add(-5.0);
		test1.add(-500.0);
		double av1=0;
		for(int i=0;i<test1.size();i++) av1+=test1.get(i);
		av1=av1/test1.size();
		double deviation1=0;
		System.out.println("Average input : "+av1);
		for(int i=0;i<test1.size();i++)
			deviation1 += Math.pow(test1.get(i)-av1, 2);
		deviation1 = deviation1/(test1.size()-1);
		deviation1 = Math.sqrt(deviation1);
		double upper1 = av1+2*deviation1;
		double bottom1 = av1-2*deviation1;
		System.out.println("upper input 1 : "+upper1);
		System.out.println("bottom input 1 : "+bottom1);
		
		List<Double> result1 = new ArrayList();
		result1=test.outliners(test1);
		List<Double> pr =new ArrayList();
		pr.add(1.0);
		pr.add(2.0);
		pr.add(10.0);
		pr.add(2.4);
		pr.add(1.7);
		pr.add(23.99);
		pr.add(-5.0);
		pr.add(-415.60994551079665);
		assertEquals(result1,pr);
		System.out.println("Output list : ");
		for(int i=0;i<pr.size();i++)
		{
			System.out.print(pr.get(i)+" || ");
		}
		
			
	}
	@Test
	public void test2() {
		Statistics test = new Statistics();
		List<Double> test2=new ArrayList();
		test2.add(1.99);
		test2.add(5.21);
		test2.add(10.5);
		test2.add(600.0);
		test2.add(-400.0);
		test2.add(0.99);
		test2.add(-5.23);
		
		
		double av2=0;
		for(int i=0;i<test2.size();i++) av2+=test2.get(i);
		av2=av2/test2.size();
		double deviation2=0;
		System.out.println("Average input : "+av2);
		for(int i=0;i<test2.size();i++)
			deviation2 += Math.pow(test2.get(i)-av2, 2);
		deviation2 = deviation2/(test2.size()-1);
		deviation2 = Math.sqrt(deviation2);
		double upper2 = av2+2*deviation2;
		double bottom2 = av2-2*deviation2;
		System.out.println("upper input 1 : "+upper2);
		System.out.println("bottom input 1 : "+bottom2);
		
		List<Double> result2 = new ArrayList();
		result2=test.outliners(test2);

List<Double> pr2=new ArrayList();
pr2.add(1.99);
pr2.add(5.21);
pr2.add(10.5);
pr2.add(600.0);
pr2.add(-400.0);
pr2.add(0.99);
pr2.add(-5.23);

assertEquals(result2,pr2);
		
	}
}
	
	













/////////////////////   TEST NORMALIZATION ////////////
//// WRZUCIŁAM WSZYSTKO, JEST PARĘ BŁĘDÓW W KODZIE JESZCZE DO EDYCJI
package klasanormalization;
import java.util.List;

public class KlasaNormalization {
public static List<Double> normalization(List<Double> list) 
	{
		double max = list.get(0);
		double min = list.get(0);
		//Calculation of min and max value
		for (int i = 1; i < list.size(); i++) {
			if (list.get(i)>max) max = list.get(i);
			if (list.get(i)<min) min = list.get(i);
		}
		//Normalization
		for(int i=0;i<list.size();i++)
			list.set(i, (list.get(i)-min)/(max-min)*2-1); 
		return list;
	}
    public static  List<Double> outliners(List<Double> list) 
	{
		//Calculation of average value
		double average=0;
		for(int i=0;i<list.size();i++)
			average+=list.get(i);
		average=average/list.size();
		//Calculation of standard deviation
		double deviation=0;
		for(int i=0;i<list.size();i++)
			deviation += Math.pow(list.get(i)-average, 2);
		deviation = deviation/(list.size()-1);
		deviation = Math.sqrt(deviation);
		//Calculation of outliners
		double upper = average+2*deviation;
		double bottom = average-2*deviation;
		//Checking and replacing departing elements for outliners
		for(int i=0;i<list.size();i++)
		{
			if(list.get(i)>upper) list.set(i, upper);
			if(list.get(i)<bottom) list.set(i, bottom);
		}
		return list;
	} 
}
package klasanormalization;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import java.util.List;
import java.util.ArrayList;
import static org.junit.Assert.*;

public class KlasaNormalizationTest {
    
    public KlasaNormalizationTest() {
    }
    
    @BeforeClass
    public static void setUpClass() {
    }
    
    @AfterClass
    public static void tearDownClass() {
    }
    
    @Before
    public void setUp() {
    }
    
    @After
    public void tearDown() {
    }
    @Test
    public void testNormalization() {
        System.out.println("Test metody 'normalization'");
        KlasaNormalization instance = new KlasaNormalization();
        System.out.println("Inicjalizujemy przykladowy zestaw danych dla metodu outliners");
        List<Double>lista=new ArrayList();
		lista.add(2.0);
		lista.add(3.5);
		lista.add(-100.0);
		lista.add(35.2);
		lista.add(25.3);
		lista.add(32.90);
        instance.outliners(lista);
        System.out.println(" Sprawdzamy prawidlowosc pobranych danych (zwracanych przez metoda 'outliners')");
        List<Double> oczekiwana=instance.outliners(lista);
        boolean czy_zgodne=true;
      
        if(oczekiwana==null) czy_zgodne = false;
            
            if(!czy_zgodne)
            {
                System.out.println("Nieprawidlowy pobor danych");
                
            }//end if
      System.out.println("Sprawdzamy normalizacje danych");
      /*Transformacja ta jest przeprowadzana wedlug wzoru:
        a(i)'=(a(i)-a(i)max)/(a(i)max-a(i)min)
 	a(i)max jest maksymalna wartosc wystepujaca w zbiorze dla i-tej wartosci
        a(i))min jest minimalna wartoscia
      */
        double max = oczekiwana.get(0);
        double min = oczekiwana.get(0);
	//Calculation of min and max value
	for (int i = 1; i < oczekiwana.size(); i++) {
		if (oczekiwana.get(i)>max) max = oczekiwana.get(i);
			if (oczekiwana.get(i)<min) min = oczekiwana.get(i);
		}
		//Normalization
		for(int i=0;i<oczekiwana.size();i++)
			oczekiwana.set(i, (oczekiwana.get(i)-min)/(max-min)*2-1); 
                
	System.out.println("Lista 'oczekiwana' zawiera prawidlowo znormalizowane elementy,porownujemy je z elementami zwroconymi przez metode 'normalization'");
        List<Double> uzyskana=instance.normalization(lista);
        int i=0;
        while(i < oczekiwana.size() && czy_zgodne == true)
        {
            if(oczekiwana.get(i)!=uzyskana.get(i)) czy_zgodne = false;
            
            if(!czy_zgodne)
            {
                System.out.println("Blad w tescie normalizacji!");      
                System.out.println("oczekiwano .. " + oczekiwana.get(i));
                System.out.println("uzyskano .... " + uzyskana.get(i));
            }//end if
        }//end while
        assertEquals(true,czy_zgodne);
       
    }  
}
