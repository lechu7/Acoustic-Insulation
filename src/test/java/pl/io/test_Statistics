//////////////////// Test OUTLINERS ////////////////////////////////
package testIO;
import java.util.ArrayList;
import java.util.List;
import static org.junit.Assert.*;

import org.junit.Test;

public class test_IO {

	@Test
	public void test() {
		Statistics test = new Statistics();
		List<Double> test1 = new ArrayList();
		test1.add(1.0);
		test1.add(2.0);
		test1.add(10.0);
		test1.add(2.4);
		test1.add(1.7);
		test1.add(23.99);
		test1.add(-5.0);
		test1.add(-500.0);
		double av1=0;
		for(int i=0;i<test1.size();i++) av1+=test1.get(i);
		av1=av1/test1.size();
		double deviation1=0;
		System.out.println("Average input 1: "+av1);
		for(int i=0;i<test1.size();i++)
			deviation1 += Math.pow(test1.get(i)-av1, 2);
		deviation1 = deviation1/(test1.size()-1);
		deviation1 = Math.sqrt(deviation1);
		double upper1 = av1+2*deviation1;
		double bottom1 = av1-2*deviation1;
		System.out.println("upper input 1 : "+upper1);
		System.out.println("bottom input 1 : "+bottom1);
		
		List<Double> result1 = new ArrayList();
		result1=test.outliners(test1);
		List<Double> pr =new ArrayList();
		pr.add(1.0);
		pr.add(2.0);
		pr.add(10.0);
		pr.add(2.4);
		pr.add(1.7);
		pr.add(23.99);
		pr.add(-5.0);
		pr.add(-415.60994551079665);
		assertEquals(result1,pr);
		System.out.println("Output list : ");
		for(int i=0;i<pr.size();i++)
		{
			System.out.print(pr.get(i)+" || ");
		}
		
			
	}
	@Test
	public void test2() {
		Statistics test = new Statistics();
		List<Double> test2=new ArrayList();
		test2.add(1.99);
		test2.add(5.21);
		test2.add(10.5);
		test2.add(600.0);
		test2.add(-400.0);
		test2.add(0.99);
		test2.add(-5.23);
		
		
		double av2=0;
		for(int i=0;i<test2.size();i++) av2+=test2.get(i);
		av2=av2/test2.size();
		double deviation2=0;
		System.out.println();
		System.out.println("Average input 2: "+av2);
		for(int i=0;i<test2.size();i++)
			deviation2 += Math.pow(test2.get(i)-av2, 2);
		deviation2 = deviation2/(test2.size()-1);
		deviation2 = Math.sqrt(deviation2);
		double upper2 = av2+2*deviation2;
		double bottom2 = av2-2*deviation2;
		System.out.println("upper input 2 : "+upper2);
		System.out.println("bottom input 2 : "+bottom2);
		
		List<Double> result2 = new ArrayList();
		result2=test.outliners(test2);

List<Double> pr2=new ArrayList();
pr2.add(1.99);
pr2.add(5.21);
pr2.add(10.5);
pr2.add(600.0);
pr2.add(-400.0);
pr2.add(0.99);
pr2.add(-5.23);
  System.out.println("Output list 2");
for(int i=0;i<pr2.size();i++)
{
	System.out.print(pr2.get(i)+" || ");
}

assertEquals(result2,pr2);
		
	}
}
	
	



/////////////////////   TEST NORMALIZATION ////////////
package klasanormalization;
import java.util.List;

public class KlasaNormalization {

    
     public static double[] normalization(double[] tab)
    {
        double max = tab[0];                        //Defining and calculating the max value
        double min = tab[0];                        //Defining and calculating the min value
        for (int i = 1; i < tab.length; i++) {
            if (tab[i]>max) max = tab[i];   //If the tab item is greater than the temporary maximum, temporary becomes of this value
            if (tab[i]<min) min = tab[i];       //If the tab item is lower than the temporary minimum, temporary becomes of this value
        }
       
        for(int i=0;i<tab.length;i++)                   //Normalization
            tab[i] = (tab[i]-min)/(max-min)*2-1;
           
        return tab;                                 //Return a normalized tab
    }
     public static  double[] outliners(double[] tab)
    {
       
        double average=0;                           //Defining and calculating of average value
        for(int i=0;i<tab.length;i++)
            average+=tab[i];
        average=average/tab.length;
       
        double deviation=0;                         //Calculation of standard deviation
        for(int i=0;i<tab.length;i++)
            deviation += Math.pow(tab[i]-average, 2);
        deviation = deviation/(tab.length-1);
        deviation = Math.sqrt(deviation);
                                                    //Calculation of outliners
        double upper = average+2*deviation;         //Defining and calculating of the upper limit
        double bottom = average-2*deviation;        //Defining and calculating of the lower limit
       
        for(int i=0;i<tab.length;i++)           //Checking and replacing departing elements for outliners
        {
            if(tab[i]>upper) tab[i] = upper; //If the value exceeds the upper limit it is converted to it
            if(tab[i]<bottom) tab[i] =bottom; //If the value exceeds the lower limit it is converted to it
        }
        return tab;                                 //returning a corrected tab
    }
    public static void main(String[] args) {
       
    }
                
} 
package klasanormalization;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import java.util.List;
import java.util.ArrayList;
import java.util.Objects;
import static org.junit.Assert.*;

public class KlasaNormalizationTest {
    
    public KlasaNormalizationTest() {
    }
    
    @BeforeClass
    public static void setUpClass() {
    }
    
    @AfterClass
    public static void tearDownClass() {
    }
    
    @Before
    public void setUp() {
    }
    
    @After
    public void tearDown() {
    }

    @Test
    public void testNormalization() {
        System.out.println("Test metody 'normalization'");
        //przykladowy zestaw danych dla metody 'outliners'
        double [] tab=new double[6];
		tab[0]=2.0;
		tab[1]=3.5;
		tab[2]=-100;
		tab[3]=35.5;
		tab[4]=25.3;
		tab[5]=32.90;
        
        System.out.println(" Sprawdzamy prawidlowosc pobranych danych (zwracanych przez metoda 'outliners')");
        double [] oczekiwana=KlasaNormalization.outliners(tab);
        boolean czy_zgodne=true;
      
        if(oczekiwana==null) czy_zgodne = false;
            
            if(!czy_zgodne)
            {
                System.out.println("Nieprawidlowy pobor danych");
                
            }
      System.out.println("Sprawdzamy normalizacje danych");
      /*Transformacja ta jest przeprowadzana wedlug wzoru:
        a(i)'=(a(i)-a(i)max)/(a(i)max-a(i)min)
 	a(i)max jest maksymalna wartosc wystepujaca w zbiorze dla i-tej wartosci
        a(i))min jest minimalna wartoscia
      */
        double max = oczekiwana[0];                        
        double min = oczekiwana[0];                       
        for (int i = 1; i < oczekiwana.length; i++) {
            if (oczekiwana[i]>max) max = oczekiwana[i];   
            if (oczekiwana[i]<min) min = oczekiwana[i];     
        }
       
        for(int i=0;i<oczekiwana.length;i++)                  
            oczekiwana[i] = (oczekiwana[i]-min)/(max-min)*2-1;
                
        //Tablica 'oczekiwana' zawiera prawidlowo znormalizowane elementy,porownujemy je z elementami zwroconymi przez metode 'normalization'
        double [] uzyskana=KlasaNormalization.normalization(lista);
        int i=0;
        while(i < oczekiwana.length && czy_zgodne == true)
        {
            if(oczekiwana[i] != uzyskana[i] || uzyskana[i]<-1 || uzyskana[i]>1) czy_zgodne = false;       
            if(!czy_zgodne)
            {
                System.out.println("Blad w tescie normalizacji!");      
                System.out.println("oczekiwano .. " + oczekiwana[i]));
                System.out.println("uzyskano .... " + uzyskana[i]);
            }
	    i++;
        }//end while
        assertEquals(true,czy_zgodne);
    }
       
} 
   
   
