package pl.io;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;

/**
 *
 */
public class CalculationTest {
    
    public CalculationTest() {
    }
    
    @BeforeClass
    public static void setUpClass() {
    }
    
    @AfterClass
    public static void tearDownClass() {
    }
    
    @Before
    public void setUp() {
    }
    
    @After
    public void tearDown() {
    }

    /**
     * Test of transformation method, of class Calculation.
     * Not ready yet
     */
   /** @org.junit.Test
    public void testTransformation() {
        System.out.println("transformation");
        Object aDouble_sample = null;
        Calculation instance = new Calculation();
        double expResult = 0.0;
        double result = instance.transformation(aDouble_sample);
        assertEquals(expResult, result, 0.0);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }
    */

    /**
     * Test of diff method, of class Calculation.
     * @author Mateusz Kubiakowski
     */
    @org.junit.Test
    public void testDiff() {
        System.out.println("diff");
        double[] listch1 = new double[]{77.5, 89.5};
        double[] listch2 = new double[]{75.2, 88.3};
        double[] expResult = new double[]{2.3, 1.2};
        double[] result = Calculation.diff(listch1, listch2);
        boolean czy_rowne = true;
        int i = 0;
        while(i<expResult.length && czy_rowne == true) {
            if(expResult[i] < result[i] - 0.0001 || expResult[i] > result[i] + 0.0001) czy_rowne = false;
            i++;
        }//koniec while
        assertEquals(czy_rowne, true);
    }//koniec testu diff
    
    @Test
	public void testCalculateIsolation() {
    	double[] fc = new double[20];
    	double[] sc = new double[20];
    	double freq = 20.0;
    	
    	Random r = new Random();
		for (int i = 0; i < fc.length; i++){
			fc[i] = r.nextDouble()*46+80.0;
		}
		for (int i = 0; i < sc.length; i++){
			sc[i] = r.nextDouble()*46+80.0;
		}
		
		double[] dbs1 = Calculation.calcDBs(fc, freq);
		double[] dbs2 = Calculation.calcDBs(sc, freq);
		
		double[] expectedResult = Calculation.diff(dbs1, dbs2);
		double[] result = Calculation.calculateIsolation(fc, sc, freq);
		assertArrayEquals(expectedResult, result, 0.0001);
	}
}
