package pl.io;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;

/**
 *
 */
public class CalculationTest {
    
    public CalculationTest() {
    }
    
    @BeforeClass
    public static void setUpClass() {
    }
    
    @AfterClass
    public static void tearDownClass() {
    }
    
    @Before
    public void setUp() {
    }
    
    @After
    public void tearDown() {
    }

    /**
     * Test of transformation method, of class Calculation.
     
     */
   /** @org.junit.Test
    public void testTransformation() {
        System.out.println("transformation");
        Object aDouble_sample = null;
        Calculation instance = new Calculation();
        double expResult = 0.0;
        double result = instance.transformation(aDouble_sample);
        assertEquals(expResult, result, 0.0);
        // TODO review the generated test code and remove the default call to fail.
        //fail("The test case is a prototype.");
    }
    */

    /**
     * Test of diff method, of class Calculation.
     * @author Mateusz Kubiakowski
     */
    @org.junit.Test
    public void testDiff() {
        System.out.println("diff");
        double[] listch1 = new double[]{77.5, 89.5};
        double[] listch2 = new double[]{75.2, 88.3};
        double[] expResult = new double[]{2.3, 1.2};
        double[] result = Calculation.diff(listch1, listch2);
        boolean czy_rowne = true;
        int i = 0;
        while(i<expResult.length && czy_rowne == true) {
            if(expResult[i] < result[i] - 0.0001 || expResult[i] > result[i] + 0.0001) czy_rowne = false;
            i++;
        }//koniec while
        assertEquals(czy_rowne, true);
    }//koniec testu diff
    
     @Test
    
    public void testCalcDBs() {
        System.out.println("calcDBs");
        double[] ch = new double[20];
        double frequency = 20.0;
        Random r = new Random();
	for (int i = 0; i < ch.length; i++){
		ch[i] = r.nextDouble()*48+75.0;
	}
        
        Complex[] fft = FFT.fft(PreparingFFT.DataPreparingForFFT(ch));
        double[] eS=PreparingFFT.EnergySpectrum(fft, ch.length);
        
        double[] expResult = Calculation.dbs(eS,frequency,1,fft.length); 
        double[] result = Calculation.calcDBs(ch, frequency);
        assertArrayEquals(expResult, result,0.0001);
        // TODO review the generated test code and remove the default call to fail.
        //fail("The test case is a prototype.");
    }
    
    @Test
    public void testCalculateIsolation() {
    	double[] fc = new double[20];
    	double[] sc = new double[20];
    	double freq = 20.0;
    	
    	Random r = new Random();
	for (int i = 0; i < fc.length; i++){
		fc[i] = r.nextDouble()*46+80.0;
	}
	for (int i = 0; i < sc.length; i++){
		sc[i] = r.nextDouble()*46+80.0;
	}
		
	double[] dbs1 = Calculation.calcDBs(fc, freq);
	double[] dbs2 = Calculation.calcDBs(sc, freq);
		
	double[] expectedResult = Calculation.diff(dbs1, dbs2);
	double[] result = Calculation.calculateIsolation(fc, sc, freq);
	assertArrayEquals(expectedResult, result, 0.0001);
     }
     
     /**
     * Test of dbs method, of class Calculation.
     */
    @Test
    public void testDbs() {
        System.out.println("dbs");
        double[] tab = new double[20];
        Random r = new Random();
        for (int i = 0; i < tab.length; i++) {
            tab[i] = r.nextDouble()*48+75.0;
        } 
        Complex[] fft = FFT.fft(PreparingFFT.DataPreparingForFFT(tab));     
        double[] PowerS = PreparingFFT.EnergySpectrum(fft, tab.length);
        double fs = 20.0;
        double P0 = 1;
        int N = fft.length;
        
        double[] expResult = Calculation.calcDBs(tab,fs);
        double[] result = Calculation.dbs(PowerS, fs, P0, N);
        assertArrayEquals(expResult, result, 0.0001);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }
    
    /**
     * Test of transformation method, of class Calculation.
     */
    @Test
    public void testTransformation() {
        System.out.println("transformation");
        
        double[] samples = new double[]{-0.03480425839330703,0.07910192950176387,0.7233322451735928,0.1659819820667019};
        
        Complex[] x = new Complex[samples.length];
        x[0] = new Complex(-0.03480425839330703,0);
        x[1] = new Complex(0.07910192950176387,0);
        x[2] = new Complex(0.7233322451735928,0);
        x[3] = new Complex(0.1659819820667019,0);
        
        Complex[] expResult = new Complex[samples.length];
        expResult[0] = new Complex(0.9336118983487516,0);
        expResult[1] = new Complex(-0.7581365035668999,0.08688005256493803);
        expResult[2] = new Complex(0.44344407521182005,0);
        expResult[3] = new Complex(-0.7581365035668999,-0.08688005256493803);

        Complex[] result = Calculation.transformation(samples);
        assertArrayEquals(expResult, result, 0.0001);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }
}
